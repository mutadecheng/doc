# This is a basic workflow to help you get started with Actions

name: docker-dotnet-debug_7.0-build

# Controls when the action will run. 
on:
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:
    types: docker-dotnet-debug_7.0-build

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: build image
        run: |
           set -e

           echo "start build"
           export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME  }}"
           export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"

           cd ./docker/Environment/dotnet-debug/docker-image
           
           
           echo "(x.1)登录"
           docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
           
                      
           echo "(x.2)get version"
           version=`docker run -i --rm mcr.microsoft.com/dotnet/sdk:7.0 dotnet --info | grep Version | head -n 1`
           version=`echo ${version#*:} | sed 's/ //g'`
           echo $version
           

           echo "(x.3)构建镜像"
           cd dotnet-debug_7.0
           docker build -t serset/dotnet-debug:7.0 -t serset/dotnet-debug:$version -t serset/dotnet:debug-7.0 -t serset/dotnet:debug-$version .
           cd ..
           
           echo "(x.4)推送到镜像仓库" 
           docker push serset/dotnet-debug:7.0
           docker push serset/dotnet-debug:$version
           docker push serset/dotnet:debug-7.0
           docker push serset/dotnet:debug-$version
           
           
                
           echo "build succeed!"